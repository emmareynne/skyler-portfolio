---
export interface Props {
    title: string;
    description?: string;
    imageUrl: string;
    link?: string;
    ctaText?: string;
    tags?: string[];
    author?: string;
    authorImage?: string;
    date?: string;
}

const { 
    title, 
    description, 
    imageUrl, 
    link = "#", 
    ctaText, 
    tags, 
    author, 
    authorImage,
    date 
} = Astro.props;
---

<div class="relative isolate flex flex-col justify-end overflow-hidden bg-gray-900 px-8 pt-80 pb-8 sm:pt-48 lg:pt-80 group transition-all duration-300 hover:shadow-lg hover:shadow-indigo-500/20 hover:-translate-y-1">
    <img
        src={imageUrl}
        alt={title}
        class="absolute inset-0 -z-10 size-full object-cover transition-all duration-500 ease-in-out group-hover:scale-105"

    />
    <div class="absolute inset-0 -z-10 bg-linear-to-t from-gray-900 via-gray-900/40"></div>
    <div class="absolute inset-0 -z-10 rounded-2xl ring-1 ring-gray-900/10 ring-inset"></div>

    {(author || date || tags) && (
        <div class="flex flex-wrap items-center gap-y-1 overflow-hidden text-sm/6 text-gray-300">
            {date && <time datetime={date} class="mr-8">{date}</time>}
            {(author || tags) && (
                <div class="-ml-4 flex items-center gap-x-4">
                    <svg viewBox="0 0 2 2" class="-ml-0.5 size-0.5 flex-none fill-white/50">
                        <circle cx="1" cy="1" r="1"></circle>
                    </svg>
                    {author && (
                        <div class="flex gap-x-2.5">
                            {authorImage && (
                                <img
                                    src={authorImage}
                                    alt={author}
                                    class="size-6 flex-none rounded-full bg-white/10"
                                />
                            )}
                            {author}
                        </div>
                    )}
                    {tags && tags.length > 0 && (
                        <div class="flex flex-wrap gap-2 ml-2">
                            {tags.map(tag => (
                                <span class="inline-flex items-center rounded-md bg-indigo-400/10 px-2 py-1 text-xs font-medium text-indigo-400 ring-1 ring-inset ring-indigo-400/20">
                                    {tag}
                                </span>
                            ))}
                        </div>
                    )}
                </div>
            )}
        </div>
    )}
    
    <h3 class="mt-3 text-lg/6 font-semibold text-white transition-all duration-300 group-hover:text-indigo-300 font-heading" transition:name={`title-${title.replace(/\s+/g, '-').toLowerCase()}`}>
        <a href={link}>
            <span class="absolute inset-0"></span>
            {title}
        </a>
    </h3>
    
    {description && (
        <p class="mt-2 text-sm text-gray-300 line-clamp-2 transition-all duration-300 group-hover:text-gray-200">{description}</p>
    )}
    
    {ctaText && (
        <div class="pointer-events-none absolute bottom-8 right-8 flex h-8 items-center transition-all duration-300 transform group-hover:translate-x-1" transition:animate="slide">
            <span class="text-sm font-medium text-white transition-colors duration-300 group-hover:text-indigo-300">{ctaText}</span>
            <svg viewBox="0 0 16 16" fill="none" aria-hidden="true" class="ml-1 h-4 w-4 stroke-current transition-transform duration-300 group-hover:translate-x-0.5">
                <path d="M6.75 5.75 9.25 8l-2.5 2.25" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
            </svg>
        </div>
    )}
</div>
