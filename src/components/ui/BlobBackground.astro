---
export interface Props {
    mood?: 'calm' | 'energetic' | 'professional' | 'creative' | 'elegant';
    opacity?: number;
    speed?: number;
    blobCount?: number;
}

const { 
    mood = 'calm', 
    opacity = 40, 
    speed = 1,
    blobCount = 7
} = Astro.props;

// Color schemes based on different moods (3 colors per mood)
const colorSchemes = {
    calm: ['#8ecae6', '#219ebc', '#023047'],
    energetic: ['#ffb703', '#fb8500', '#ef476f'],
    professional: ['#4361ee', '#3a0ca3', '#7209b7'],
    creative: ['#f72585', '#7209b7', '#4cc9f0'],
    elegant: ['#ccd5ae', '#e9edc9', '#d4a373']
};

const colors = colorSchemes[mood];

// Generate a unique ID for this instance
const instanceId = Math.random().toString(36).substring(2, 9);
---

<div class="relative">
    <!-- Container for multiple blobs with proper z-index -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none -z-10" aria-hidden="true">
        <!-- Top fade gradient -->
        <div class="absolute top-0 left-0 right-0 h-40 pointer-events-none z-10 bg-gradient-to-b from-gray-900 via-gray-900/50 to-transparent"></div>
        <!-- Bottom fade gradient -->
        <div class="absolute bottom-0 left-0 right-0 h-40 pointer-events-none z-10 bg-gradient-to-t from-gray-900 via-gray-900/50 to-transparent"></div>
        
        <!-- SVG container for blobs -->
        <div id={`blob-container-${instanceId}`} class="absolute inset-0 pointer-events-none">
            <svg 
                id={`blob-svg-${instanceId}`}
                class="w-full h-full" 
                style={`opacity: ${opacity/100};`}
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 1000 1000"
                preserveAspectRatio="none">
                <!-- Blobs will be generated here by JavaScript -->
            </svg>
        </div>
    </div>
    
    <!-- Content slot -->
    <div class="relative z-10">
        <slot />
    </div>
</div>

<style>
    /* Ensure SVG takes up full space */
    svg {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
    }
    
    /* Style for the blob paths - enhanced for more organic appearance */
    .blob-path {
        mix-blend-mode: multiply;
        filter: blur(40px);
        will-change: transform;
        transition: filter 0.5s ease;
    }
</style>

<!-- Import GSAP from CDN -->
<script is:inline src="https://cdn.jsdelivr.net/npm/gsap@3.12.5/dist/gsap.min.js"></script>

<script define:vars={{ instanceId, colors, speed, opacity, blobCount }}>
    // Performance optimization variables
    let isPageVisible = true;
    let animationsPaused = false;
    
    // Check if user prefers reduced motion
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    
    // Initialize blobs when document is ready
    document.addEventListener('DOMContentLoaded', () => {
        if (typeof gsap !== 'undefined') {
            // Use requestIdleCallback for non-critical initialization
            if ('requestIdleCallback' in window) {
                window.requestIdleCallback(() => initializeBlobs(), { timeout: 1000 });
            } else {
                // Fallback for browsers that don't support requestIdleCallback
                setTimeout(() => initializeBlobs(), 100);
            }
        } else {
            console.error('GSAP not loaded properly');
        }
    });
    
    // Detect when page becomes visible/hidden to optimize performance
    document.addEventListener('visibilitychange', () => {
        isPageVisible = document.visibilityState === 'visible';
        if (isPageVisible) {
            if (animationsPaused) {
                gsap.resumeAll();
                animationsPaused = false;
            }
        } else {
            gsap.pauseAll();
            animationsPaused = true;
        }
    });

    function initializeBlobs() {
        const svg = document.getElementById(`blob-svg-${instanceId}`);
        if (!svg) return;
        
        // Get container dimensions
        const viewBox = { width: 1000, height: 1000 };
        
        // Create multiple blobs
        const blobs = [];
        const blobSizes = [0.5, 0.65, 0.4]; // Different size multipliers for variety
        
        // Create specified number of blobs (default 3)
        for (let i = 0; i < blobCount; i++) {
            // Create a blob path
            const blobPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            blobPath.classList.add('blob-path');
            blobPath.setAttribute('fill', colors[i % colors.length]);
            blobPath.setAttribute('opacity', '0.8');
            
            // Generate initial ellipse shape
            const points = generateEllipsePoints(24); // More points for even smoother ellipse
            const pathData = createEllipsePath(points);
            blobPath.setAttribute('d', pathData);
            
            // Add to SVG
            svg.appendChild(blobPath);
            
            // Store blob data
            const size = blobSizes[i % blobSizes.length];
            
            // Set initial position
            const x = Math.random() * (viewBox.width - viewBox.width * size * 0.5);
            const y = Math.random() * (viewBox.height - viewBox.height * size * 0.5);
            
            // Set initial velocity - ensure they're not too slow and have clear direction
            const vx = (Math.random() > 0.5 ? 1 : -1) * (1 + Math.random() * 1.5) * speed;
            const vy = (Math.random() > 0.5 ? 1 : -1) * (1 + Math.random() * 1.5) * speed;
            
            const blob = {
                element: blobPath,
                points: points,
                size: size,
                x: x,
                y: y,
                vx: vx,
                vy: vy,
                color: colors[i % colors.length]
            };
            
            blobs.push(blob);
            
            // Animate ellipse distortion
            animateEllipseDistortion(blob);
            
            // Animate blob color
            animateBlobColor(blob);
        }
        
        // Animate blob movement if not using reduced motion
        if (!prefersReducedMotion) {
            animateBlobsMovement(blobs, viewBox);
        }
        
        // Handle window resize
        window.addEventListener('resize', () => {
            if (isPageVisible) {
                // Debounce resize handling
                if (window.resizeTimeout) {
                    clearTimeout(window.resizeTimeout);
                }
                window.resizeTimeout = setTimeout(() => {
                    // No need to do anything for SVG as it scales automatically
                }, 200);
            }
        });
    }
    
    // Generate points for a standard ellipse shape
    function generateEllipsePoints(count) {
        const points = [];
        const angleStep = (Math.PI * 2) / count;
        
        // Ellipse ratio between 1.5 and 2.0 (width to height ratio) - more elongated
        const ellipseRatio = 1.5 + Math.random() * 0.5;
        
        // Random rotation angle for the ellipse
        const rotationAngle = Math.random() * Math.PI;
        
        // Use a perfect ellipse formula without randomness for smooth shape
        for (let i = 0; i < count; i++) {
            const angle = i * angleStep;
            
            // Fixed radius for perfect ellipse
            const baseRadius = 180;
            
            // Apply ellipse shape with ratio
            let x = Math.cos(angle) * baseRadius * ellipseRatio;
            let y = Math.sin(angle) * baseRadius;
            
            // Rotate the ellipse
            const rotatedX = x * Math.cos(rotationAngle) - y * Math.sin(rotationAngle);
            const rotatedY = x * Math.sin(rotationAngle) + y * Math.cos(rotationAngle);
            
            points.push({
                x: rotatedX,
                y: rotatedY,
                originX: rotatedX,
                originY: rotatedY,
                // Store original angle and radius for distortion
                angle: angle,
                baseRadius: baseRadius,
                // Store ellipse properties for distortion
                ellipseRatio: ellipseRatio,
                rotationAngle: rotationAngle
            });
        }
        
        return points;
    }
    
    // Create a perfect ellipse path using elliptical arc commands
    function createEllipsePath(points) {
        // For a perfect ellipse, we'll use SVG's elliptical arc command
        // First, calculate the center point (which is 0,0 for our case)
        const center = { x: 0, y: 0 };
        
        // Find the maximum x and y values to determine the radii
        let maxX = 0;
        let maxY = 0;
        
        points.forEach(point => {
            maxX = Math.max(maxX, Math.abs(point.x));
            maxY = Math.max(maxY, Math.abs(point.y));
        });
        
        // Create a perfect ellipse path using the arc command
        // Start at the rightmost point of the ellipse
        let pathData = `M ${maxX + center.x} ${center.y}`;  
        
        // Add the top half arc
        pathData += ` A ${maxX} ${maxY} 0 0 1 ${-maxX + center.x} ${center.y}`;  
        
        // Add the bottom half arc to complete the ellipse
        pathData += ` A ${maxX} ${maxY} 0 0 1 ${maxX + center.x} ${center.y}`;  
        
        return pathData;
    }
    
    // Animate ellipse distortion based on movement with smoother tweens
    function animateEllipseDistortion(blob) {
        // Store current shape parameters for smooth tweening
        let currentRadiusX = 180;
        let currentRadiusY = 180;
        let currentAngle = 0;
        
        // Create a tween for smooth shape changes
        const shapeTween = gsap.to({}, {
            duration: 0.01, // Very short duration for continuous updates
            repeat: -1,
            onRepeat: updateShape
        });
        
        // Update ellipse shape based on velocity with smooth transitions
        function updateShape() {
            if (!isPageVisible) return;
            
            // Calculate speed for stretching with some natural variation
            const baseSpeed = Math.sqrt(blob.vx * blob.vx + blob.vy * blob.vy);
            const direction = Math.atan2(blob.vy, blob.vx);
            
            // Add subtle organic pulsing (breathing effect)
            const time = Date.now() / 1000;
            const breathingFactor = 1 + Math.sin(time * 0.5) * 0.03; // Subtle 3% size oscillation
            
            // Calculate new ellipse parameters based on movement with organic variation
            // Stretch in direction of movement, but maintain elliptical shape
            const stretchFactor = 1 + Math.min(baseSpeed * 0.08, 0.4) * breathingFactor; 
            
            // Find the maximum x and y values to determine the radii
            let maxX = 0;
            let maxY = 0;
            
            blob.points.forEach(point => {
                maxX = Math.max(maxX, Math.abs(point.originX));
                maxY = Math.max(maxY, Math.abs(point.originY));
            });
            
            // Apply stretch in the direction of movement
            const angle = direction;
            const cos = Math.cos(angle);
            const sin = Math.sin(angle);
            
            // Calculate target radii with stretch in movement direction
            const targetRadiusX = maxX * (1 + (cos * cos * (stretchFactor - 1))) * breathingFactor;
            const targetRadiusY = maxY * (1 + (sin * sin * (stretchFactor - 1))) * breathingFactor;
            
            // Smoothly interpolate towards target values (easing)
            currentRadiusX = gsap.utils.interpolate(currentRadiusX, targetRadiusX, 0.1);
            currentRadiusY = gsap.utils.interpolate(currentRadiusY, targetRadiusY, 0.1);
            currentAngle = gsap.utils.interpolate(currentAngle, angle, 0.05); // Slower angle changes
            
            // Create new ellipse path with these parameters
            const pathData = `M ${currentRadiusX} 0 A ${currentRadiusX} ${currentRadiusY} ${currentAngle * 180 / Math.PI} 0 1 ${-currentRadiusX} 0 A ${currentRadiusX} ${currentRadiusY} ${currentAngle * 180 / Math.PI} 0 1 ${currentRadiusX} 0`;
            
            // Apply the new path
            blob.element.setAttribute('d', pathData);
        }
        
        // Start the update cycle
        updateShape();
        
        // Return the tween for potential cleanup
        return shapeTween;
    }
    
    // Animate blob color with smooth organic transitions
    function animateBlobColor(blob) {
        // Start with a random color from the list
        let currentColorIndex = Math.floor(Math.random() * colors.length);
        blob.element.setAttribute('fill', colors[currentColorIndex]);
        
        // Create a timeline for color transitions
        const colorTimeline = gsap.timeline();
        
        function updateColor() {
            // Pick a random next color that's different from the current one
            let nextColorIndex;
            do {
                nextColorIndex = Math.floor(Math.random() * colors.length);
            } while (nextColorIndex === currentColorIndex && colors.length > 1);
            
            currentColorIndex = nextColorIndex;
            const nextColor = colors[nextColorIndex];
            
            // Calculate a natural-feeling duration based on blob size and speed
            // Larger blobs change color more slowly for a more organic feel
            const baseDuration = 5 + Math.random() * 5; // Between 5-10 seconds
            const sizeFactor = 1 + (blob.size - 0.5) * 2; // Size influence
            const duration = baseDuration * sizeFactor;
            
            // Use a custom ease for more organic color transitions
            // Different eases create more natural, less mechanical transitions
            const eases = ['sine.inOut', 'power2.inOut', 'power1.inOut', 'circ.inOut'];
            const randomEase = eases[Math.floor(Math.random() * eases.length)];
            
            // Transition to the new color with smoother tweening
            colorTimeline.to(blob.element, {
                attr: { fill: nextColor },
                duration: duration,
                ease: randomEase,
                onComplete: updateColor
            });
        }
        
        // Start the color transition cycle
        updateColor();
        
        // Return the timeline for potential cleanup
        return colorTimeline;
    }
    
    // Animate ellipses with collision detection, edge bouncing, and organic movement
    function animateBlobsMovement(blobs, viewBox) {
        // Calculate collision radius for each blob (for performance)
        blobs.forEach(blob => {
            // Collision radius is based on the average of width and height
            blob.collisionRadius = 200 * blob.size;
            
            // Add organic movement properties
            blob.noiseOffsetX = Math.random() * 1000;
            blob.noiseOffsetY = Math.random() * 1000;
            blob.wanderStrength = 0.2 + Math.random() * 0.3; // Random wander strength for each blob
            blob.lastX = blob.x; // Store previous positions for smooth transitions
            blob.lastY = blob.y;
            
            // Ensure blobs start in non-overlapping positions
            let attempts = 0;
            let validPosition = false;
            
            while (!validPosition && attempts < 10) {
                validPosition = true;
                
                // Check against other blobs
                for (let i = 0; i < blobs.length; i++) {
                    const otherBlob = blobs[i];
                    if (otherBlob === blob) continue;
                    
                    // Calculate distance between centers
                    const dx = blob.x - otherBlob.x;
                    const dy = blob.y - otherBlob.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    
                    // Check if they overlap
                    const minDistance = blob.collisionRadius + otherBlob.collisionRadius;
                    if (distance < minDistance) {
                        // They overlap, try a new position
                        blob.x = Math.random() * (viewBox.width - blob.collisionRadius * 2) + blob.collisionRadius;
                        blob.y = Math.random() * (viewBox.height - blob.collisionRadius * 2) + blob.collisionRadius;
                        validPosition = false;
                        break;
                    }
                }
                
                attempts++;
            }
        });
        
        // Simple Perlin-like noise function for organic movement
        function noise(x, y) {
            // Simple noise approximation
            return Math.sin(x * 0.01) * Math.cos(y * 0.01) * 2.0;
        }
        
        // Create a master timeline for synchronized animation
        const masterTimeline = gsap.timeline();
        
        // Use GSAP ticker for smooth animation
        gsap.ticker.add(() => {
            if (!isPageVisible) return;
            
            const time = Date.now() * 0.001; // Current time in seconds for organic movement
            
            // First update positions with organic movement
            blobs.forEach(blob => {
                // Update noise offsets for organic movement
                blob.noiseOffsetX += 0.01;
                blob.noiseOffsetY += 0.01;
                
                // Calculate organic movement influence
                const organicVx = noise(blob.noiseOffsetX * 100, time * 0.5) * blob.wanderStrength;
                const organicVy = noise(blob.noiseOffsetY * 100, time * 0.5) * blob.wanderStrength;
                
                // Blend organic movement with current velocity
                const blendedVx = blob.vx * 0.95 + organicVx * 0.05;
                const blendedVy = blob.vy * 0.95 + organicVy * 0.05;
                
                // Store previous position for interpolation
                blob.lastX = blob.x;
                blob.lastY = blob.y;
                
                // Update position based on blended velocity
                blob.x += blendedVx;
                blob.y += blendedVy;
                
                // Update actual velocity for collision calculations
                blob.vx = blendedVx;
                blob.vy = blendedVy;
            });
            
            // Then check for collisions and edge bounces
            blobs.forEach(blob => {
                // Calculate effective size for edge detection
                const effectiveRadius = blob.collisionRadius;
                
                // Bounce off edges with easing
                if (blob.x <= effectiveRadius || blob.x >= viewBox.width - effectiveRadius) {
                    // Reverse horizontal direction with energy loss and easing
                    blob.vx *= -0.85; // More energy loss for smoother bounce
                    
                    // Add organic randomness to vertical velocity
                    blob.vy += (Math.random() * 0.8 - 0.4) * speed;
                    
                    // Keep blob in bounds with slight buffer
                    blob.x = Math.max(effectiveRadius + 5, Math.min(blob.x, viewBox.width - effectiveRadius - 5));
                }
                
                if (blob.y <= effectiveRadius || blob.y >= viewBox.height - effectiveRadius) {
                    // Reverse vertical direction with energy loss and easing
                    blob.vy *= -0.85; // More energy loss for smoother bounce
                    
                    // Add organic randomness to horizontal velocity
                    blob.vx += (Math.random() * 0.8 - 0.4) * speed;
                    
                    // Keep blob in bounds with slight buffer
                    blob.y = Math.max(effectiveRadius + 5, Math.min(blob.y, viewBox.height - effectiveRadius - 5));
                }
                
                // Check for collisions with other blobs
                blobs.forEach(otherBlob => {
                    if (otherBlob === blob) return;
                    
                    // Calculate distance between centers
                    const dx = blob.x - otherBlob.x;
                    const dy = blob.y - otherBlob.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    
                    // Check if they collide
                    const minDistance = blob.collisionRadius + otherBlob.collisionRadius;
                    if (distance < minDistance) {
                        // Calculate collision response
                        const angle = Math.atan2(dy, dx);
                        const sine = Math.sin(angle);
                        const cosine = Math.cos(angle);
                        
                        // Rotate velocities to simplify collision calculation
                        const vx1 = blob.vx * cosine + blob.vy * sine;
                        const vy1 = blob.vy * cosine - blob.vx * sine;
                        const vx2 = otherBlob.vx * cosine + otherBlob.vy * sine;
                        const vy2 = otherBlob.vy * cosine - otherBlob.vx * sine;
                        
                        // Swap x velocities for collision response with mass consideration
                        // Larger blobs have more momentum
                        const mass1 = blob.size;
                        const mass2 = otherBlob.size;
                        const totalMass = mass1 + mass2;
                        
                        // Calculate new velocities based on conservation of momentum and energy
                        const newVx1 = ((mass1 - mass2) * vx1 + 2 * mass2 * vx2) / totalMass * 0.9; // 10% energy loss
                        const newVx2 = ((mass2 - mass1) * vx2 + 2 * mass1 * vx1) / totalMass * 0.9;
                        
                        // Convert back to original coordinate system
                        blob.vx = newVx1 * cosine - vy1 * sine;
                        blob.vy = vy1 * cosine + newVx1 * sine;
                        otherBlob.vx = newVx2 * cosine - vy2 * sine;
                        otherBlob.vy = vy2 * cosine + newVx2 * sine;
                        
                        // Add slight organic randomness to prevent predictable patterns
                        blob.vx += (Math.random() * 0.3 - 0.15) * speed;
                        blob.vy += (Math.random() * 0.3 - 0.15) * speed;
                        otherBlob.vx += (Math.random() * 0.3 - 0.15) * speed;
                        otherBlob.vy += (Math.random() * 0.3 - 0.15) * speed;
                        
                        // Move blobs apart to prevent overlap with easing
                        const overlap = minDistance - distance + 5; // Add small buffer
                        const moveX = (overlap * cosine) / 2;
                        const moveY = (overlap * sine) / 2;
                        
                        // Apply movement with mass consideration
                        const massRatio1 = mass2 / totalMass;
                        const massRatio2 = mass1 / totalMass;
                        
                        blob.x += moveX * massRatio1;
                        blob.y += moveY * massRatio1;
                        otherBlob.x -= moveX * massRatio2;
                        otherBlob.y -= moveY * massRatio2;
                    }
                });
                
                // Occasionally add slight organic direction changes
                if (Math.random() < 0.005) { // Less frequent for smoother movement
                    const organicChange = 0.3 + Math.random() * 0.4; // More consistent change
                    const angle = Math.random() * Math.PI * 2; // Random direction
                    blob.vx += Math.cos(angle) * organicChange * speed;
                    blob.vy += Math.sin(angle) * organicChange * speed;
                }
                
                // Apply velocity limits with organic variation
                const time = Date.now() * 0.001;
                const organicFactor = 1 + Math.sin(time + blob.noiseOffsetX) * 0.1; // ±10% variation
                const maxVelocity = 2.5 * speed * organicFactor;
                const minVelocity = 0.3 * speed * organicFactor;
                
                // Apply velocity limits with smoothing
                if (Math.abs(blob.vx) > maxVelocity) {
                    blob.vx = maxVelocity * (blob.vx < 0 ? -1 : 1) * 0.95 + blob.vx * 0.05;
                }
                if (Math.abs(blob.vy) > maxVelocity) {
                    blob.vy = maxVelocity * (blob.vy < 0 ? -1 : 1) * 0.95 + blob.vy * 0.05;
                }
                
                // Ensure minimum velocity with organic variation
                if (Math.abs(blob.vx) < minVelocity) {
                    const sign = blob.vx < 0 ? -1 : 1;
                    blob.vx = (minVelocity + Math.random() * 0.2) * sign;
                }
                if (Math.abs(blob.vy) < minVelocity) {
                    const sign = blob.vy < 0 ? -1 : 1;
                    blob.vy = (minVelocity + Math.random() * 0.2) * sign;
                }
                
                // Apply transform with smooth interpolation
                gsap.to(blob.element, {
                    attr: { transform: `translate(${blob.x}, ${blob.y}) scale(${blob.size})` },
                    duration: 0.2, // Short duration for smooth movement
                    ease: 'power1.out', // Gentle easing for organic feel
                    overwrite: 'auto' // Prevent animation buildup
                });
            });
        });
        
        return masterTimeline;
    }
    
    // Clean up when component is removed
    document.addEventListener('astro:before-swap', () => {
        isPageVisible = false;
        gsap.killAll();
        if (window.resizeTimeout) {
            clearTimeout(window.resizeTimeout);
        }
    });
</script>

